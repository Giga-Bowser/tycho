factorial := func(n: number) -> number {
	if n == 0 {
		return 1
	}

	return n * factorial(n - 1)
}

is_even := func(n: number) -> boolean {
	return n % 1 == 0
}

countSpaces := func(str: string) -> number {
	count := 0
	for i in 1..#str {
		if str:sub(i) == " " {
			count = count + 1
		}
	}
	return count
}

lerp := func(a: number, b:number, t:number) -> number {
	return (1 - t) * a + t * b
}

sign := func(n: number) -> number {
	val := 0
	if n > 0 {
		val = 1
	} else if n < 0 {
		val = -1
	}

	return val
}

clamp := func(value: number, min: number, max: number) -> number {
	return math.min(math.max(value, min), max)
}

clampMag := func(value: number, min: number, max: number) -> number {
	return sign(value) * clamp(math.abs(value), math.abs(min), math.abs(max))
}

while_break_example := func() {
	i := 0
	while i < 10 {
		n := math.random(20)
		if n > 15 {
			break
		}
		i = i + 1
	}
}

getTrapezoidSpeed := func(
	startSpeed: number,
	middleSpeed: number,
	endSpeed: number,
	totalDistance: number,
	rampUpDistance: number,
	rampDownDistance: number,
	currentDistance: number
) -> number {
	// if the ramp up/down distances are too great, simply lerp from start to finish instead of ramping
	if rampDownDistance + rampUpDistance > totalDistance {
		if currentDistance < 0 {
			return startSpeed
		} else if totalDistance < currentDistance {
			return endSpeed
		}

		return lerp(startSpeed, endSpeed, currentDistance / totalDistance)
	}

	if currentDistance < 0 {
		return startSpeed
	} else if currentDistance < rampUpDistance {
		return lerp(startSpeed, middleSpeed, currentDistance / rampUpDistance)
	} else if currentDistance < totalDistance - rampDownDistance {
		return middleSpeed
	} else if currentDistance < totalDistance {
		rampDownStartDistance := (totalDistance - rampDownDistance)
		return lerp(middleSpeed, endSpeed, (currentDistance - rampDownStartDistance) / rampDownDistance)
	} else {
		return endSpeed
	}
}

bezier := func(t: number, p1: number, p2: number, p3: number, p4: number) -> number {
	q1 := lerp(p1, p2, t)
	q2 := lerp(p2, p3, t)
	q3 := lerp(p3, p4, t)

	r1 := lerp(q1, q2, t)
	r2 := lerp(q2, q3, t)

	return lerp(r1, r2, t)
}

doGrossRampStuff := func(curr: number, targ: number, accel: number, decel: number) -> number {
	if curr == 0 || (curr > 0 && targ > curr) || (curr < 0 && targ < curr) {
		// accelerating
		change := math.min(math.abs(curr - targ), accel) * sign(targ - curr)
		curr = curr + change
	} else if (curr > 0 && targ < curr) || (curr < 0 && targ > curr) {
		// decelerating
		change := math.min(math.abs(curr - targ), decel) * sign(targ - curr)
		curr = curr + change
	}

	return curr
}

deadband := func(value: number, band: number) -> number {
	if value > band {
		return (value - band) / (1 - band)
	} else if value < -band {
		return (value + band) / (1 - band)
	}

	return 0
}

struct Vector {
	x: number,
	y: number

	constructor(x: number, y: number) {
		self.x = x
		self.y = y
	}
}

Vector:length := func() -> number {
	return math.sqrt(self.x * self.x + self.y * self.y)
}

Vector:normalized := func() -> Vector {
	return Vector:new(self.x / self:length(), self.y / self:length())
}

Vector:rotate := func(radAng: number) -> Vector {
	return Vector:new(
		(self.x * math.cos(radAng)) - (self.y * math.sin(radAng)),
		(self.x * math.sin(radAng)) + (self.y * math.cos(radAng))
	)
}

Vector:dot := func(vec: Vector) -> number {
	return self.x * vec.x + self.y * vec.y
}



struct Ramp {
	currentSpeed: number,
	maxAccel: number,
	maxDecel: number

	constructor(timeToMax: number, timeToStop: number) {
		self.currentSpeed = 0
		self.maxAccel = 1 / (50 * timeToMax)
		self.maxDecel = 1 / (50 * timeToStop)
	}
}

Ramp:ramp := func(targetSpeed: number) -> number {
	self.currentSpeed = doGrossRampStuff(self.currentSpeed, targetSpeed, self.maxAccel, self.maxDecel)
	return self.currentSpeed
}

struct PIDController {
	kp: number,
	ki: number,
	kd: number,
	integral: number,
	previousError: number?,
	previousOutput: number?,
	previousTime: number,
	dt: number,
	shouldRunIntegral: boolean

	constructor(p: number, i: number, d: number) {
		self.kp = p || 0
		self.ki = i || 0
		self.kd = d || 0
		self.integral = 0
		self.previousError = nil
		self.previousOutput = nil
		self.previousTime = 0
		self.dt = 0
		self.shouldRunIntegral = false
	}
}

PIDController:clear := func(time: number) {
	self.dt = 0
	self.previousTime = time
	self.integral = 0
	self.previousError = nil
	self.previousOutput = nil
	self.shouldRunIntegral = false
}

PIDController:pid := func(
	input: number,
	setpoint: number,
	thresh: number?,
	maxChange: number?,
	maxOutput: number?
) -> number {
	threshold := thresh || 0
	error := setpoint - input
	p := error * self.kp
	i := 0

	if self.shouldRunIntegral {
		if threshold == 0 || (input < (threshold + setpoint) && input > (setpoint - threshold)) {
			self.integral = self.integral + self.dt * error
		} else {
			self.integral = 0
		}
	} else {
		self.shouldRunIntegral = true
	}

	d: number

	if self.previousError == nil || self.dt == 0 {
		d = 0
	} else {
		d = ((error - self.previousError) / self.dt) * self.kd
	}

	self.previousError = error

	output := p + i + d

	if self.previousOutput != nil && maxChange != nil {
		output = self.previousOutput + clampMag(output - self.previousOutput, 0, maxChange / 50)
	}

	if maxOutput != nil {
		output = clampMag(output, 0, maxOutput)
	}

	self.previousOutput = output

	return output
}

foo := func() -> number {
	return 42
}

a := {
	foo = foo(),
	[3] = 43,
	0x45,
}

print("hello, world")

struct T {}

tests : [string]func() = {}

test := func(name: string, f: func()) {
	tests[name] = f
}

reset := "\27[0m"
red := "\27[31m"
green := "\27[32m"
blue := "\27[94m"

T:assertEqual := func(actual: number, expected: number, message: string?) {
	message = message || ("expected " .. tostring(expected) .. ", but got " .. tostring(actual))
	assert(math.abs(actual - expected) < 0.00001, message)
}

test("Vector tests", func() {
	T:assertEqual(Vector:new(3, 4):length(), 5, "Vector:length()")
	T:assertEqual(Vector:new(3, 4):normalized().x, 0.6, "Vector:normalized().x")
	T:assertEqual(Vector:new(3, 4):normalized().y, 0.8, "Vector:normalized().y")
	actual := Vector:new(1, 2):rotate(math.pi / 2)
	T:assertEqual(actual.x,-2, "Vector:rotate().x")
	T:assertEqual(actual.y, 1, "Vector:rotate().y")
})

test("getTrapezoidSpeed", func() {
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 5, 1, 2, -1), 0.2)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 5, 1, 2, 0), 0.2)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 5, 1, 2, 0.5), 0.5)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 5, 1, 2, 1), 0.8)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 5, 1, 2, 1.5), 0.8)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 5, 1, 2, 2), 0.8)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 5, 1, 2, 3), 0.8)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 5, 1, 2, 4), 0.6)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 5, 1, 2, 5), 0.4)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 5, 1, 2, 6), 0.4)

	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 1, 2, -1), 0.2)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 1, 2, 0), 0.2)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 1, 2, 0.5), 0.5)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 1, 2, 1), 0.8)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 1, 2, 2), 0.6)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 1, 2, 3), 0.4)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 1, 2, 4), 0.4)

	// ramp up/down distances are greater than the total distance
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 2, 2, -1), 0.2)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 2, 2, 0), 0.2)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 2, 2, 1.5), 0.3)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 2, 2, 3), 0.4)
	T:assertEqual(getTrapezoidSpeed(0.2, 0.8, 0.4, 3, 2, 2, 4), 0.4)
})

test("doGrossRampStuff", func() {
	// positive speed
	T:assertEqual(doGrossRampStuff(0.5, 1, 0.2, 0.1), 0.7, "should accelerate by 0.2")
	T:assertEqual(doGrossRampStuff(0.5, 0.1, 0.2, 0.1), 0.4, "should decelerate by 0.1")
	T:assertEqual(doGrossRampStuff(0.5, 0, 0.2, 0.1), 0.4, "should decelerate by 0.1")
	T:assertEqual(doGrossRampStuff(0.5, -1, 0.2, 0.1), 0.4, "should decelerate by 0.1")
	T:assertEqual(
		doGrossRampStuff(0.5, 0.5, 0.2, 0.1), 0.5,
		"speed should not change when current and target are equal"
	)

	// negative speed
	T:assertEqual(doGrossRampStuff(-0.5, 1, 0.2, 0.1), -0.4, "should decelerate by 0.1")
	T:assertEqual(doGrossRampStuff(-0.5, 0, 0.2, 0.1), -0.4, "should decelerate by 0.1")
	T:assertEqual(doGrossRampStuff(-0.5, -0.1, 0.2, 0.1), -0.4, "should decelerate by 0.1")
	T:assertEqual(doGrossRampStuff(-0.5, -1, 0.2, 0.1), -0.7, "should accelerate by 0.2")
	T:assertEqual(
		doGrossRampStuff(-0.5, -0.5, 0.2, 0.1), -0.5,
		"speed should not change when current and target are equal"
	)

	// zero
	T:assertEqual(doGrossRampStuff(0, 0, 0.2, 0.1), 0, "should go nowhere at zero")
	T:assertEqual(doGrossRampStuff(0, 1, 0.2, 0.1), 0.2, "should accelerate by 0.2 positively")
	T:assertEqual(doGrossRampStuff(0, -1, 0.2, 0.1), -0.2, "should accelerate by 0.2 negatively")

	// overshoot
	T:assertEqual(doGrossRampStuff(0.5, 0.6, 1, 0.1), 0.6, "acceleration overshot when positive")
	T:assertEqual(doGrossRampStuff(-0.5, -0.6, 1, 0.1), -0.6, "acceleration overshot when negative")
	T:assertEqual(doGrossRampStuff(0.5, -0.1, 0.1, 1), -0.1, "deceleration overshot when positive")
	T:assertEqual(doGrossRampStuff(-0.5, 0.1, 0.1, 1), 0.1, "deceleration overshot when negative")
})

test("ramp", func() {
	// five ticks to max, ten ticks to stop
	ramp := Ramp:new(0.1, 0.2)

	// accelerate (positively)
	T:assertEqual(ramp:ramp(0.9), 0.2)
	T:assertEqual(ramp:ramp(0.9), 0.4)
	T:assertEqual(ramp:ramp(1.1), 0.6)
	T:assertEqual(ramp:ramp(1.1), 0.8)
	T:assertEqual(ramp:ramp(1), 1.0)
	T:assertEqual(ramp:ramp(1), 1.0)

	// decelerate (while positive)
	T:assertEqual(ramp:ramp(0.1), 0.9)
	T:assertEqual(ramp:ramp(0.1), 0.8)
	T:assertEqual(ramp:ramp(0), 0.7)
	T:assertEqual(ramp:ramp(0), 0.6)
	T:assertEqual(ramp:ramp(-0.1), 0.5)
	T:assertEqual(ramp:ramp(-0.1), 0.4)
	T:assertEqual(ramp:ramp(-1), 0.3)
	T:assertEqual(ramp:ramp(-1), 0.2)
	T:assertEqual(ramp:ramp(-1), 0.1)
	T:assertEqual(ramp:ramp(0), 0.0)
	T:assertEqual(ramp:ramp(0), 0.0)

	// accelerate (negatively)
	T:assertEqual(ramp:ramp(-0.9), -0.2)
	T:assertEqual(ramp:ramp(-0.9), -0.4)
	T:assertEqual(ramp:ramp(-1.1), -0.6)
	T:assertEqual(ramp:ramp(-1.1), -0.8)
	T:assertEqual(ramp:ramp(-1), -1.0)
	T:assertEqual(ramp:ramp(-1), -1.0)

	// decelerate (while negative)
	T:assertEqual(ramp:ramp(-0.1), -0.9)
	T:assertEqual(ramp:ramp(-0.1), -0.8)
	T:assertEqual(ramp:ramp(0), -0.7)
	T:assertEqual(ramp:ramp(0), -0.6)
	T:assertEqual(ramp:ramp(0.1), -0.5)
	T:assertEqual(ramp:ramp(0.1), -0.4)
	T:assertEqual(ramp:ramp(1), -0.3)
	T:assertEqual(ramp:ramp(1), -0.2)
	T:assertEqual(ramp:ramp(1), -0.1)
	T:assertEqual(ramp:ramp(0), 0.0)
	T:assertEqual(ramp:ramp(0), 0.0)
})

test("number tests", func() {
	assert(0x3.14 == tonumber("0x3.14"))
	assert(0x3.14fp+3 == tonumber("0x3.14fp+3"))
	assert(0xAbC.p1 == tonumber("0xAbC.p1"))
	assert(0x0.7p1 == tonumber("0x0.7p1"))
	assert(0x.dEfP-1 == tonumber("0x.dEfP-1"))
	assert(0x0p1 == tonumber("0x0p1"))
	assert(0x0P1 == tonumber("0x0P1"))
	assert(0x0.p1 == tonumber("0x0.p1"))
	assert(0x0.P1 == tonumber("0x0.P1"))
	assert(0x0.0p1 == tonumber("0x0.0p1"))
	assert(0x0.0P1 == tonumber("0x0.0P1"))
	assert(0x.0p1 == tonumber("0x.0p1"))
	assert(0x.0P1 == tonumber("0x.0P1"))
	assert(0x0p0 == tonumber("0x0p0"))
	assert(0x0.p9999 == tonumber("0x0.p9999"))
	
	assert(0x001fffffffffffffp0 == tonumber("0x001fffffffffffffp0"))
	assert(0x003fffffffffffffp0 == tonumber("0x003fffffffffffffp0"))
	assert(0xfffffffffffff800p-11 == tonumber("0xfffffffffffff800p-11"))
	assert(0xfffffffffffffc00p-11 == tonumber("0xfffffffffffffc00p-11"))
	assert(0x000fffffffffffffp-1074 == tonumber("0x000fffffffffffffp-1074"))
	assert(0x001fffffffffffffp-1075 == tonumber("0x001fffffffffffffp-1075"))
	assert(0x001ffffffffffffep-1075 == tonumber("0x001ffffffffffffep-1075"))
	assert(0xfffffffffffff800p-1086 == tonumber("0xfffffffffffff800p-1086"))
	assert(0xfffffffffffff000p-1086 == tonumber("0xfffffffffffff000p-1086"))
	assert(0x0000000000000001p-1074 == tonumber("0x0000000000000001p-1074"))
	assert(0x0000000000000001p-1075 == tonumber("0x0000000000000001p-1075"))
	assert(0x0000000000000002p-1075 == tonumber("0x0000000000000002p-1075"))
	assert(0x0000000000000002p-1076 == tonumber("0x0000000000000002p-1076"))
	assert(0x0000000000000003p-1075 == tonumber("0x0000000000000003p-1075"))
	assert(0x0000000000000003p-1076 == tonumber("0x0000000000000003p-1076"))
	assert(0x8000000000000000p-1137 == tonumber("0x8000000000000000p-1137"))
	assert(0x8000000000000000p-1138 == tonumber("0x8000000000000000p-1138"))
	assert(0x001fffffffffffffp971 == tonumber("0x001fffffffffffffp971"))
	assert(0x003fffffffffffffp971 == tonumber("0x003fffffffffffffp971"))
	assert(0x003ffffffffffffep971 == tonumber("0x003ffffffffffffep971"))
	assert(0x0000000000000001p1024 == tonumber("0x0000000000000001p1024"))
	assert(0x8000000000000000p961 == tonumber("0x8000000000000000p961"))
	assert(0xfffffffffffff800p960 == tonumber("0xfffffffffffff800p960"))
	assert(0xfffffffffffffc00p960 == tonumber("0xfffffffffffffc00p960"))
})

// -----------------------

for name, test in tests {
	result := blue .. name .. ": " .. reset
	ok, err := pcall(func() { test() })
	if ok {
		result = result .. green .. "passed"
	} else {
		result = result .. red .. "failed"
		result = result .. "\n" .. err
	}

	result = result .. reset

	print(result)
}